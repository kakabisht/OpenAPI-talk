# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.order_item import OrderItem  # noqa: F401,E501
from swagger_server import util


class OrderResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, order_id: int=None, customer_id: int=None, items: List[OrderItem]=None, total_price: float=None):  # noqa: E501
        """OrderResponse - a model defined in Swagger

        :param order_id: The order_id of this OrderResponse.  # noqa: E501
        :type order_id: int
        :param customer_id: The customer_id of this OrderResponse.  # noqa: E501
        :type customer_id: int
        :param items: The items of this OrderResponse.  # noqa: E501
        :type items: List[OrderItem]
        :param total_price: The total_price of this OrderResponse.  # noqa: E501
        :type total_price: float
        """
        self.swagger_types = {
            'order_id': int,
            'customer_id': int,
            'items': List[OrderItem],
            'total_price': float
        }

        self.attribute_map = {
            'order_id': 'orderId',
            'customer_id': 'customerId',
            'items': 'items',
            'total_price': 'totalPrice'
        }
        self._order_id = order_id
        self._customer_id = customer_id
        self._items = items
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt) -> 'OrderResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrderResponse of this OrderResponse.  # noqa: E501
        :rtype: OrderResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_id(self) -> int:
        """Gets the order_id of this OrderResponse.


        :return: The order_id of this OrderResponse.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id: int):
        """Sets the order_id of this OrderResponse.


        :param order_id: The order_id of this OrderResponse.
        :type order_id: int
        """

        self._order_id = order_id

    @property
    def customer_id(self) -> int:
        """Gets the customer_id of this OrderResponse.


        :return: The customer_id of this OrderResponse.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: int):
        """Sets the customer_id of this OrderResponse.


        :param customer_id: The customer_id of this OrderResponse.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def items(self) -> List[OrderItem]:
        """Gets the items of this OrderResponse.


        :return: The items of this OrderResponse.
        :rtype: List[OrderItem]
        """
        return self._items

    @items.setter
    def items(self, items: List[OrderItem]):
        """Sets the items of this OrderResponse.


        :param items: The items of this OrderResponse.
        :type items: List[OrderItem]
        """

        self._items = items

    @property
    def total_price(self) -> float:
        """Gets the total_price of this OrderResponse.


        :return: The total_price of this OrderResponse.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: float):
        """Sets the total_price of this OrderResponse.


        :param total_price: The total_price of this OrderResponse.
        :type total_price: float
        """

        self._total_price = total_price
